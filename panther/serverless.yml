service: panther

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  apiKeys:
    - panther
  # vpc:
  #   securityGroupIds:
  #     - !Ref securityGroup
  #   subnetIds:
  #     - !Ref privateSubnet1
  #     - !Ref privateSubnet2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: arn:aws:s3:::panther-${env:BUCKET_SUFFIX}
    - Effect: Allow
      Action:
        - s3:*
      Resource: arn:aws:s3:::panther-${env:BUCKET_SUFFIX}/*
    - Effect: Allow
      Action:
        - ssm:*
      Resource:
        - Fn::Join:
          - ':'
          - - arn:aws:ssm
            - ${self:provider.region}
            - Ref: AWS::AccountId
            - parameter/panther/*

plugins:
  - serverless-offline
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: panther-${env:BUCKET_SUFFIX}
      bucketPrefix: assets/ # optional 
      localDir: assets # required 

resources:
  Resources:
    bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: panther-${env:BUCKET_SUFFIX}
        AccessControl: Private
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          IgnorePublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true
    # lambdaVpc:
    #   Type: AWS::EC2::VPC
    #   Properties:
    #     CidrBlock: "10.42.0.0/16"
    # publicSubnet:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    #     CidrBlock: "10.42.0.0/24"
    #     AvailabilityZone: !Select [0, !GetAZs "" ]
    #     MapPublicIpOnLaunch: false
    # internetGateway:
    #   Type: AWS::EC2::InternetGateway
    # lambdaGatewayAttachment:
    #   Type: AWS::EC2::VPCGatewayAttachment
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    #     InternetGatewayId: !Ref internetGateway
    # publicRouteTable:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    # publicRoute:
    #   Type: AWS::EC2::Route
    #   DependsOn: internetGateway
    #   Properties:
    #     RouteTableId: !Ref publicRouteTable
    #     DestinationCidrBlock: 0.0.0.0/0
    #     GatewayId: !Ref internetGateway
    # publicSubnet1RouteTableAssociation:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     SubnetId: !Ref publicSubnet
    #     RouteTableId: !Ref publicRouteTable
    # natGateway:
    #   Type: AWS::EC2::NatGateway
    #   DependsOn: natPublicIP
    #   Properties:
    #     AllocationId: !GetAtt natPublicIP.AllocationId
    #     SubnetId: !Ref publicSubnet
    # natPublicIP:
    #   Type: AWS::EC2::EIP
    #   DependsOn: lambdaVpc
    #   Properties:
    #     Domain: vpc
    # privateSubnet1:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    #     CidrBlock: "10.42.1.0/24"
    #     AvailabilityZone: !Select [0, !GetAZs "" ]
    #     MapPublicIpOnLaunch: false
    # privateSubnet2:
    #   Type: AWS::EC2::Subnet
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    #     CidrBlock: "10.42.2.0/24"
    #     AvailabilityZone: !Select [1, !GetAZs "" ]
    #     MapPublicIpOnLaunch: false
    # privateRouteTable:
    #   Type: AWS::EC2::RouteTable
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    # privateRoute:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId: !Ref privateRouteTable
    #     DestinationCidrBlock: 0.0.0.0/0
    #     NatGatewayId: !Ref natGateway
    # privateRouteTableAssnSubnet1:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     RouteTableId: !Ref privateRouteTable
    #     SubnetId: !Ref privateSubnet1
    # privateRouteTableAssnSubnet2:
    #   Type: AWS::EC2::SubnetRouteTableAssociation
    #   Properties:
    #     RouteTableId: !Ref privateRouteTable
    #     SubnetId: !Ref privateSubnet2
    # s3Endpoint:
    #   Type: AWS::EC2::VPCEndpoint
    #   Properties:
    #     PolicyDocument: |
    #       {
    #           "Statement": [{
    #               "Effect": "Allow",
    #               "Principal": "*",
    #               "Action": [ "s3:*" ]
    #           }]
    #       }
    #     RouteTableIds:
    #       - !Ref privateRouteTable
    #     ServiceName: "com.amazonaws.us-east-1.s3"
    #     VpcId: !Ref lambdaVpc
    # # WTF Amazon - really this isn't supported by CFN yet?
    # # ssmEndpoint:
    # #   Type: AWS::EC2::VPCEndpoint
    # #   Properties:
    # #     PolicyDocument:
    # #       Version: 2012-10-17
    # #       Statement:
    # #       - Effect: Allow
    # #         Principal: "*"
    # #         Action:
    # #           - "ssm:*"
    # #         Resource:
    # #           - "*"
    # #     RouteTableIds:
    # #       - !Ref privateRouteTable
    # #     ServiceName: !Sub "com.amazonaws.${self:provider.region}.ssm"
    # #     VpcId: !Ref lambdaVpc
    # securityGroup:
    #   Type: "AWS::EC2::SecurityGroup"
    #   Properties:
    #     VpcId: !Ref lambdaVpc
    #     GroupDescription: "Security group for panther."
    #     SecurityGroupEgress:
    #       - CidrIp: "0.0.0.0/0"
    #         IpProtocol: "TCP"
    #         FromPort: 443
    #         ToPort: 443
    #         Description: "Outbound 443 only."
    # flowLog:
    #   Type: AWS::EC2::FlowLog
    #   Properties:
    #     DeliverLogsPermissionArn: !GetAtt flowLogRole.Arn
    #     LogGroupName: !Sub "/aws/lambda/vpc/panther/flowlog"
    #     ResourceId: !Ref lambdaVpc
    #     ResourceType: "VPC"
    #     TrafficType: "REJECT"
    # flowLogRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: "/"
    #     AssumeRolePolicyDocument: |
    #       {
    #           "Statement": [{
    #               "Effect": "Allow",
    #               "Principal": { "Service": [ "vpc-flow-logs.amazonaws.com" ]},
    #               "Action": [ "sts:AssumeRole" ]
    #           }]
    #       }
    #     Policies:
    #       - PolicyName: "panther-dev-flowlog"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Action:
    #                 - "logs:CreateLogGroup"
    #                 - "logs:CreateLogStream"
    #                 - "logs:DescribeLogGroups"
    #                 - "logs:DescribeLogStreams"
    #                 - "logs:PutLogEvents"
    #               Effect: "Allow"
    #               Resource: "*"
    # bucketPolicy:
    #   Type: "AWS::S3::BucketPolicy"
    #   Properties:
    #     Bucket: !Ref bucket
    #     PolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Deny"
    #           Principal: 
    #             AWS:
    #               - Fn::GetAtt: [ "IamRoleLambdaExecution", "Arn" ]
    #           Action:
    #             - "s3:*"
    #           Resource: 
    #             - Fn::Join: ["", ["arn:aws:s3:::", !Ref bucket ] ]
    #             - Fn::Join: ["", ["arn:aws:s3:::", !Ref bucket, "/*"] ]
    #           Condition:
    #             StringNotEquals:
    #               "aws:sourceVpce": !Ref lambdaVpc

functions:
  panther:
    handler: handler.panther
    events:
      - http:
          path: api/Panther
          method: get
          private: true
          request:
            parameters:
              querystring:
                host: true
                path: true
    timeout: 30
